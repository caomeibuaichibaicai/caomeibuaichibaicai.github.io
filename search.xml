<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js柯里化函数]]></title>
    <url>%2F2018%2F05%2F16%2Fjs%E6%9F%AF%E9%87%8C%E5%8C%96%2F</url>
    <content type="text"><![CDATA[1.相关定义高阶函数： 将函数作为参数或者返回值是函数的函数。*柯里化是高阶函数的一种表现！* 2.普通函数的柯里化，也是高阶函数1234567891011121314//柯里化前：function add(a, b) &#123; return a + b; &#125; // 执行 add 函数，一次传入两个参数即可 add(10, 2) // 12 //柯里化后： function add(a) &#123; return function(b) &#123; return a + b &#125;&#125;var add3 = add(3)add3(4) === 3 + 4 //true 2.es6的箭头函数柯里化写法如下： let add = a =&gt; b =&gt; a + b n个箭头就是进行了n-1次柯里化，前n-1个箭头都是在传递参数，只有最后一次的箭头函数的调用才会有返回值，所以整个函数逻辑以及参数的真正调用都在最后一次箭头函数的调用中。也就是说如果有 n 个箭头，那么我们在 n-1 次调用之前，都只是在向表达式里传参，而伴随着第 n 次调用，就会直接返回结果。 例子里的多个连续箭头（无论俩个箭头函数三个及以上）函数连在一起 就是在柯里化。这种连续箭头函数就是多次柯里化函数的 es6 写法。 柯里化就是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回（接受余下的参数而且返回结果的）新函数的技术。柯里化后，将第一个参数变量存在函数里面了(闭包)。参考链接在这里 3.柯里函数的好处1.可以惰性求值（延迟计算）2.可以提前传递部分参数（提前返回）3.参数复用（减少一些重复性的传参）]]></content>
      <categories>
        <category>Js基础</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>高阶函数</tag>
        <tag>柯里化</tag>
        <tag>es6箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vuex笔记]]></title>
    <url>%2F2018%2F04%2F16%2Fvuex%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.通过在根组件，设置store选项，将状态从根组件注入到下面所有的子组件中类似：1234567891011const app = new Vue(&#123; el: '#app', // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store, components: &#123; Counter &#125;, template: ` &lt;div class="app"&gt; &lt;counter&gt;&lt;/counter&gt; &lt;/div&gt; `&#125;) 需要调用Vue.use(Vuex)，这样就不需要在每个组件中频繁导入store了，子组件通过this.$store就可以访问到 2.mapState 辅助函数帮助我们生成计算属性,从而从store实例中读取多个state状态,vuex的状态存储是响应式的,写在computed中3.getters可以理解为store的计算属性，可以通过两种方式来访问：（1）通过属性访问，属性的getter函数可以接受两个参数，第一个表示计算属性依赖的state状态（默认要有），第二个表示计算属性依赖的其他getter属性。访问getters使用属性访问时，用store.getters.属性，同样它也是依赖缓存进行计算的，如下：12345getters: &#123; doneTodosCount: (state, getters) =&gt; &#123; return getters.doneTodos.length &#125;&#125; （2）通过方法访问，让getter返回一个带形参的箭头函数，并且给getter传递实参来实现访问getter的值。这是个函数柯里化的形式，第一个参数默认为state获取全局状态，第二个参数是返回的函数自带的自定义参数，后面还可以接其他自定义参数。getter在通过方法访问时，只要调用就会访问，不缓存结果，调用时store.getters.方法名（实参），写法如下：12345getters: &#123; getTodoById: (state) =&gt; (id) =&gt; &#123; return state.todos.find(todo =&gt; todo.id === id) &#125;&#125; 4.mapGetters将store中的多个getter映射到局部计算属性中，类似mapState，也要写在computed中5.mutation是vuex中唯一改变store中状态的方法commit提交一个mutation就可以，在mutations中写一个修改状态的回调函数，这个回调函数可以包含两个参数，第一个state是获取store中的状态（必须）；第二个是传入的要修改成的值，称之为payload荷载，大多数情况下荷载为一个对象。每个mutation都包含一个字符串的事件类型即type和回调函数即handler,其中type就是mutation的事件名，也称之为事件类型。最好使用常量代理mutation的事件名。 另外，在调用时，不能直接调用mutation handler，可以看成mutation是单单在注册，所以在调用修改状态的方法要使用store.commit()调用，例如：1234567891011121314//注册：mutations:&#123; setDataNumber (state,data) &#123; state.dataNumber = data.num &#125;&#125;//调用一：store.commit(‘setDataNumber’, &#123; num: 4&#125; )//commit里面的&#123;num:4&#125;对象作为荷载存在//////调用二：store.commit(&#123;type:’setDataNumber’,num:4&#125;)//commit里面的整个对象作为荷载存在 注意：mutation必须是同步函数，因为如果在mutation中写入异步函数，其中的回调函数是无法追踪到什么时候被调用的，那么其中的状态改变也是不能被追踪到的。 6.mapMutations辅助函数可以将methods映射为store.commit调用在辅助函数内写入mutation的事件类型，mapMutations写在methods中调用,如：1234567methods: &#123; ...mapMutations([ 'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')` // `mapMutations` 也支持载荷： 'incrementBy' //将`this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)` ]) &#125; 7.action是异步的mutation它可以改变状态，但是在action内部提交的是mutation。而且重要的一点是，action内部可以包含异步操作，是异步的，支持多重分发mutation,多个mutation同时异步调用。 action函数可以接受一个和store具有相同方法和属性的context对象，可以使用context对象来commit提交mutation，也可以通过context来获取state和getters以及dispatch都可以，例如：12345678910111213actions: &#123; increment (context) &#123; context.commit('increment') &#125; &#125;//或者不写contextactions: &#123; incrementAsync (&#123; commit &#125;) &#123; setTimeout(() =&gt; &#123; commit('increment') &#125;, 1000) &#125;&#125; action的分发调用：使用store.dispatch(‘action名’)调用，它可以处理action内部异步返回的promise，并且dispatch返回的仍是一个promise对象，所以后面可以接then()或者catch()这些方法。另外同mutation一样，添加荷载的话，有两种调用方式。12345678910// 以载荷形式分发store.dispatch('incrementAsync', &#123; amount: 10&#125;)// 以对象形式分发store.dispatch(&#123; type: 'incrementAsync', amount: 10&#125;) 8.mapActions辅助函数它写在methods中，将组件的methods映射为$store.dispatch调用，详细例子如下：123456789101112131415import &#123; mapActions &#125; from 'vuex'export default &#123; methods: &#123; ...mapActions([ 'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')` // `mapActions` 也支持载荷： 'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)` ]), ...mapActions(&#123; add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')` &#125;) &#125;&#125; 9.action的异步用法例如：123456789101112131415161718192021store.dispatch('actionA').then(() =&gt; &#123; // ...&#125;)//或者actions: &#123; actionB (&#123; dispatch, commit &#125;) &#123; return dispatch('actionA').then(() =&gt; &#123; commit('someOtherMutation') &#125;) &#125;&#125;//或者使用async以及await来表示异步actions: &#123; async actionA (&#123; commit &#125;) &#123; commit('gotData', await getData()) &#125;, async actionB (&#123; dispatch, commit &#125;) &#123; await dispatch('actionA') // 等待 actionA 完成 commit('gotOtherData', await getOtherData()) &#125;&#125; 这样，一个dispatch可以在不同模块中触发多个action 10.module模块用来解决单一状态树的状态过多造成的臃肿问题，将store分成多个module,每个module都有自己的state,getter,mutation以及action，集成store的方法如下：123456789101112131415161718const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;) (1)访问不同模块上的状态state*这里注意！state是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下，所以比如获取moduleA中的state里面的count状态值：store.state.a.count(2)访问不同模块上的getter这个就与state不同了，不同模块的 getters 会直接合并在 store.getters 下，所以比如获取moduleA中的getter里面的doneTodosCount属性：store.getter.doneTodosCount*这里要注意，因为getters不区别模块，所以不可重名，否则会报错。(3)getters模块化后新增的第三个参数rootState这个参数是用来获取全局的state,这样不同的模块就能访问其他所有的模块状态state。(4）访问不同模块上的mutation同getter类似，不同模块的 mutation 均可以通过 store.commit 直接触发。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js静态变量以及静态方法(内含ts小笔记)]]></title>
    <url>%2F2018%2F03%2F16%2Fjs%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[1.js中的静态方法是无法被实例对象所调用的例子如下：1234567var BaseClass = function() &#123;&#125;; // var BaseClass=new Function(); BaseClass.f1 = function()&#123;//定义静态方法 alert(' This is a static method '); &#125; BaseClass.f1();//This is a static method var instance1 = new BaseClass(); instance1.f1();//instance1.f1 is not a function 这里实例化的对象instance就无法调用原型上面绑定的方法，若想要调用原型上的方法，即创建非静态的实例方法，这里有三种方法： (1)在原型上面通过prototype来进行实例方法的绑定，如下： 123456var BaseClass = function() &#123;&#125;; BaseClass.prototype.method1 = function()&#123; alert(' This is a instance method '); &#125; var instance1 = new BaseClass(); instance1.method1();//This is a instance method （2）在实例上直接定义方法，如下： 123456var BaseClass = function() &#123;&#125;; var instance1 = new BaseClass(); instance1.method1 = function()&#123; alert(' This is a instance method too '); &#125; instance1.method1();//This is a instance method too （3）在构造函数内部，通过this定义实例方法，如下：1234567var BaseClass = function() &#123; this.method1 = function()&#123; alert(' Defined by the "this" instance method'); &#125; &#125;; var instance1 = new BaseClass(); instance1.method1();//Defined by the "this" instance method 这三种定义实例方法的方法，若定义三个相同名字的实例方法，三种方法的优先级从大到小依次是：实例直接定义&gt;内部this定义&gt;原型prototype绑定定义，即实例上直接定义的实例方法会覆盖掉其他两种同时定义的实例方法，并且这三种创建的实例方法必须通过类的实例来进行访问。在类（即构造函数）里面若使用var进行声明变量或者声明方法时，声明的都是局部的，局部变量或者方法是无法通过声明类的实例来进行访问的，其作用域只在内部可见。 2.js中明确来说没有真正意义上的静态变量类对象上的prototype可以作为实例对象共同拥有的“静态变量”而存在，实例对象都可以访问到该变量，并且一个实例对象改变了该变量的值，其他实例对象访问到的“静态变量”都是改变后的值（真正意义上的静态变量具有此特性），但是呢，这个“静态变量”呢，类对象是直接访问不到的，而要通过类对象.prototype.变量名，这种方法来访问这个变量，所以本质上这个“静态变量”还是个实例变量。 3.typescript推荐使用typescript是一种js的超集，可以完美解决js中没有静态变量的问题，并且支持所有的js语法，学习typescript简直就是大势所趋。ts个人学习初期基础笔记：1.在文件中创建.ts文件，写一些ts语法。2.在命令行使用 tsc -init，创建出自动编译js文件的配置文件tsconfig.json，之后使用 tsc -w 生成自动编译并且监视原ts文件的js文件，启用并排视图模式，即可自动编译为js文件。3.tsconfig.json中可以配置生成监听对应的js文件位置，launch.json中修改program的值为要打断点调试的编译后的js文件。]]></content>
      <categories>
        <category>Js基础</category>
      </categories>
      <tags>
        <tag>静态变量</tag>
        <tag>原型上实例方法</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6_解构赋值]]></title>
    <url>%2F2018%2F01%2F02%2Fes6-%E8%A7%A3%E6%9E%84%2F</url>
    <content type="text"><![CDATA[1.解构赋值要求等号右边必须是一个对象，若为null或者undefined就会报错 2.解构赋值必须是最后一个参数，不然报错，例如： 123let &#123; ...x, y, z &#125; = obj; // 句法错误let &#123; x, ...y, ...z &#125; = obj; // 句法错误let &#123;x, y, …z&#125; = obj; //正确 3.解构赋值即扩展运算符的拷贝是浅拷贝，只能实现一维的深拷贝，多维是浅拷贝。拷贝对象时，相当于Object.assign({},obj1)方法 4.扩展运算符的解构赋值，不能复制继承自原型对象的属性。 即只复制自身的属性，却不能复制它的原型对象上proto的属性。如Object.create()创建的空对象上被绑定的_proto原型属性，扩展运算符是无法复制到的，🌰如下:12345678const o = Object.create(&#123; x: 1, y: 2 &#125;);o.z = 3;let &#123; x, ...newObj &#125; = o;let &#123; y, z &#125; = newObj;x // 1y // undefinedz // 3 5.解构赋值的扩展运算符之后必须是一个变量名，而不能是一个表达式 所以要引用一个中间变量，放在三个点点之后，故:12let &#123; x, ...&#123; y, z &#125; &#125; = o;// SyntaxError: ... must be followed by an identifier in declaration contexts。。。报错 6.另外，扩展运算符可以扩展某个函数的参数，使函数能够接受多余的参数，并且保留原始函数的行为 7.如果用户对象自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。 8.对象的扩展运算符后面可以跟表达式 例如：1234const obj = &#123; ...(x &gt; 1 ? &#123;a: 1&#125; : &#123;&#125;), b: 2,&#125;; 9.扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。 大致总结到这里啦~]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>解构赋值</tag>
        <tag>扩展运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6_proto新方法]]></title>
    <url>%2F2017%2F12%2F28%2Fes6-proto%2F</url>
    <content type="text"><![CDATA[1.Object.setPrototypeOf()作用与proto相同，用来设置一个对象的prototype对象，返回参数对象本身。用来设置对象的原型对象，使原型对象的属性可以从对象上读取出来，并返回第一个参数obj 用法： Object.setPrototypeOf(obj,proto), 其中obj是对象，proto是原型对象，将proto对象设为obj对象的原型。若第一个参数不是对象，那么会自动转化为对象，但是最后还是返回的第一个参数，不会改变数据类型。但在这个过程中obj不能为undefined或者null，因为它们不能转化为对象，所以此时会报错。 2.Object.getPrototypeOf()用来读取一个对象的原型对象，例子如下：1234567function Rectangle() &#123; // ...&#125;//创建一个构造函数const rec = new Rectangle();Object.getPrototypeOf(rec) === Rectangle.prototype===rec._proto_ 同样会将obj转化为对象，机制同上。 最后，给一个完整克隆一个对象的方法，包括拷贝对象原型的属性，有以下 三种方法：1234567891011121314151617// 写法一const clone1 = &#123; __proto__: Object.getPrototypeOf(obj), ...obj&#125;;// 写法二const clone2 = Object.assign( Object.create(Object.getPrototypeOf(obj)), obj);// 写法三const clone3 = Object.create( Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj)) 写法二和写法三的通用性更强，推荐！写法一可能proto属性在非浏览器环境下，不一定会被部署~~~~]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6_proto</tag>
        <tag>原型新方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Js浮点数]]></title>
    <url>%2F2017%2F03%2F26%2FblogOne%2F</url>
    <content type="text"><![CDATA[Js浮点数小计 浮点数出现的原因js在进行计算时，需要将数字先转化为二进制，然后进行加减乘除的计算，得到的结果仍然是二进制，最后再转化为十进制，从而得到结果，在这个过程中就产生了 ==浮点数==，在小数位产生了误差。 js的计算 精度准确 的最大值是2^53^-1最小值为其对应的负数-2^53^-1若大于这个值就会出现精度丢失的情况，在2^53^至2^54^的范围内，只能计算出==偶数==；在2^54^至2^55^的范围内，只能四个数选一个，即==四的倍数==，后面以此类推，精度越来越小 js能 表示的 最大整数是2^1024^-1从2^1024^往后，后面的数字都只能被表示为Infinity 解决js浮点数中的加减乘除运算误差问题 ==单纯展示数据方法:==123function strip(num, precision = 12) &#123; return +parseFloat(num.toPrecision(precision));&#125; 先使用toPrecision对数字进行浮点数的处理，这个函数对超过指定精度的部分，进行一个凑整处理。(精度部分从最左边第一个不为0的位数开始计算)，通过经验计算，这个精度一般会选择12位。（当然也可以更高）之后会返回一个String类型的数字字符串，使用parseFloat对字符串进行转化为数字。 ==浮点进行运算方法：==这个时候的思路是把小数转化为整数，然后在进行运算.乘*：1234567891011121314151617181920const Mul = (num1, num2) =&gt; &#123; let m = 0 const s1 = `$&#123;num1&#125;` const s2 = `$&#123;num2&#125;` try &#123; // m += s1.split('.')[1].length m += get(s1.split('.'), '[1].length', 0) &#125; catch (e) &#123; console.error(e) &#125; try &#123; // m += s2.split('.')[1].length m += get(s2.split('.'), '[1].length', 0) &#125; catch (e) &#123; console.error(e) &#125; return Number(s1.replace('.', '')) * Number(s2.replace('.', '')) / Math.pow(10, m)&#125; 除/:1234567891011121314151617181920// 两个浮点数相除const Div = (num1, num2) =&gt; &#123; let t1 let t2 try &#123; // t1 = `$&#123;num1&#125;`.split('.')[1].length t1 = get(`$&#123;num1&#125;`.split('.'), '[1].length', 0) &#125; catch (e) &#123; t1 = 0 &#125; try &#123; // t2 = `$&#123;num2&#125;`.toString().split('.')[1].length t2 = get(`$&#123;num2&#125;`.toString().split('.'), '[1].length', 0) &#125; catch (e) &#123; t2 = 0 &#125; const r1 = Number(`$&#123;num1&#125;`.replace('.', '')) const r2 = Number(`$&#123;num2&#125;`.toString().replace('.', '')) return (r1 / r2) * Math.pow(10, t2 - t1)&#125; 加+：1234567891011121314151617// 两个浮点数相加const Add = (num1, num2) =&gt; &#123; let r1 let r2 try &#123; r1 = `$&#123;num1&#125;`.split('.')[1].length &#125; catch (e) &#123; r1 = 0 &#125; try &#123; r2 = `$&#123;num2&#125;`.split('.')[1].length &#125; catch (e) &#123; r2 = 0 &#125; const m = Math.pow(10, Math.max(r1, r2)) return Math.round(num1 * m + num2 * m) / m&#125; 减-：123456789101112131415161718// 两个浮点数相减const Sub = (num1, num2) =&gt; &#123; let r1 let r2 try &#123; r1 = `$&#123;num1&#125;`.split('.')[1].length &#125; catch (e) &#123; r1 = 0 &#125; try &#123; r2 = `$&#123;num2&#125;`.split('.')[1].length &#125; catch (e) &#123; r2 = 0 &#125; const m = Math.pow(10, Math.max(r1, r2)) const n = (r1 &gt;= r2) ? r1 : r2 return toFixed((Math.round(num1 * m - num2 * m) / m), n)&#125; 如果觉得很麻烦的话，当然也有现成的插件来用啊~~~比如：number-precision，这个库的优点在于体积小，只有不到1K的大小。还有我们熟知的math.js,里面的方法较全，代码可维护性也较高。 今天对浮点数的小计差不多就到这里啦💗]]></content>
      <categories>
        <category>Js基础</category>
      </categories>
      <tags>
        <tag>浮点数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[error处理语法]]></title>
    <url>%2F2017%2F02%2F11%2Ferr-catch%2F</url>
    <content type="text"><![CDATA[1.try-catch语法解释用法try是定义用来测试代码块出现错误的语句，必须和catch或者finally连用，也可以三个都一起用。catch只有当发生错误时才会执行，finally无论有无异常都会执行。还有一个throw语句是用来创建自定义错误语句，抛出js语句停止运行时的错误，可通过此自定义错误信息，如在try语句里面去自定义throw抛出的语句，在catch里面可接受自定义的err错误对象。 2.用法举例123456try &#123; adddlert("欢迎光临！");&#125;catch(err) &#123; document.getElementById("demo").innerHTML = err.message;&#125;]]></content>
      <categories>
        <category>Js基础</category>
      </categories>
      <tags>
        <tag>错误处理语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[firstArtical]]></title>
    <url>%2F2017%2F01%2F12%2FfirstArtical%2F</url>
    <content type="text"><![CDATA[这是我第二次来hexo的第一天呀~第二次见面了，hexo老朋友，16年的时候第一次使用基于node的静态资源博客 hexo 当时第一次接触感觉，这个框架好方便，网上教程很多，可以自定义许多炫酷的特效，页面响应速度也比较快，于是就开始陆续的把博客搬到这个平台，后面因为一些个人的原因，没什么时间写博客，后来换了电脑后，就彻底丢掉了之前的博客源代码，这次趁着项目时间不是紧，又开始重新上手，哈哈哈哈哈，这次代码还做了备份，很方便，妈妈再也不用担心我换电脑了，备份参考链接在这里：点我点我]]></content>
      <categories>
        <category>trytry</category>
      </categories>
      <tags>
        <tag>first标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
